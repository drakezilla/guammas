<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('TipoEvento', 'doctrine');

/**
 * BaseTipoEvento
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $nombre_tipo_evento
 * @property boolean $sugerido
 * @property integer $usuario_sugiere_id
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property Usuario $Usuario
 * 
 * @method integer    getId()                 Returns the current record's "id" value
 * @method string     getNombreTipoEvento()   Returns the current record's "nombre_tipo_evento" value
 * @method boolean    getSugerido()           Returns the current record's "sugerido" value
 * @method integer    getUsuarioSugiereId()   Returns the current record's "usuario_sugiere_id" value
 * @method timestamp  getCreatedAt()          Returns the current record's "created_at" value
 * @method timestamp  getUpdatedAt()          Returns the current record's "updated_at" value
 * @method Usuario    getUsuario()            Returns the current record's "Usuario" value
 * @method TipoEvento setId()                 Sets the current record's "id" value
 * @method TipoEvento setNombreTipoEvento()   Sets the current record's "nombre_tipo_evento" value
 * @method TipoEvento setSugerido()           Sets the current record's "sugerido" value
 * @method TipoEvento setUsuarioSugiereId()   Sets the current record's "usuario_sugiere_id" value
 * @method TipoEvento setCreatedAt()          Sets the current record's "created_at" value
 * @method TipoEvento setUpdatedAt()          Sets the current record's "updated_at" value
 * @method TipoEvento setUsuario()            Sets the current record's "Usuario" value
 * 
 * @package    guammas
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTipoEvento extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('tipo_evento');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('nombre_tipo_evento', 'string', 75, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 75,
             ));
        $this->hasColumn('sugerido', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('usuario_sugiere_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Usuario', array(
             'local' => 'usuario_sugiere_id',
             'foreign' => 'id'));
    }
}